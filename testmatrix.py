# -*- coding: utf-8 -*-
"""testmatrix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xm9wEgPsGnl0sOWYGKoTW9cK72kLr_7P
"""

import numpy as np
import torch
# Load the matrix from the specified path
matrix = np.load('/content/act_forget.npy')
matrix=torch.Tensor(matrix)
matrix=(matrix@matrix.T)/2
Uf,Sf,Vh = torch.linalg.svd(matrix,full_matrices=False)
Sf=Sf**2 / (Sf**2).sum()
print(Sf)
#Retain
matrix = np.load('/content/act_retain.npy')
matrix=torch.Tensor(matrix)
matrix=(matrix@matrix.T)/2
Ur,Sr,Vh= torch.linalg.svd(matrix,full_matrices=False)
Sr=Sr**2/(Sr**2).sum()
print(Sr)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

alpha_r=300
alpha_f=300
sqrt_imp_r = torch.diag(( (alpha_r*Sr/(( (alpha_r-1)*Sr) +1))**0.5)).clone().detach().to(device)
Ur = Ur.clone().detach().requires_grad_(True).to(device)
Ur = torch.mm(Ur, sqrt_imp_r)
Mr = torch.mm(Ur, Ur.transpose(0,1))
sqrt_imp_f = torch.diag(( ((alpha_f*Sf/(( (alpha_f-1)*Sf) +1))**0.5)).clone().detach().to(device))
Uf = Uf.clone().detach().requires_grad_(True).to(device)
Uf = torch.mm(Uf, sqrt_imp_f)
Mf = torch.mm(Uf, Uf.transpose(0,1))
I = torch.eye(Mf.shape[0]).to(device)
proj=I - Mf  + torch.mm(Mf, Mr)
print(proj)